{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","console","log","style","overflow","border","height","children","ErrorBoundry","state","hasError","eroor","info","this","setState","React","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ErrorBoundary","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAmBeA,EAfJ,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GAEtB,OACI,yBAAKC,UAAU,0CACb,yBAAKC,IAAG,+BAA0BF,EAA1B,gBAA4CG,IAAI,UAExD,6BACC,gCAAML,EAAN,KACA,+BAAKC,EAAL,QCYMK,EArBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEf,OACO,6BAEEA,EAAOC,KAAI,SAACC,EAAKC,GACnB,OACF,kBAAC,EAAD,CACMC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCCfW,EAbC,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC7B,OACK,yBAAKX,UAAU,OACnB,2BACCA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCKEI,EAVF,SAACC,GAEb,OADAC,QAAQC,IAAIF,GAEP,yBAAKG,MAAO,CAACC,SAAS,SAASC,OAAO,kBAAkBC,OAAO,UAC5DN,EAAMO,WCiBAC,E,YAtBd,WAAYR,GAAO,IAAD,8BACjB,4CAAMA,KACDS,MAAM,CACHC,UAAS,GAHA,E,+EAODC,EAAMC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACP,uDAGAG,KAAKb,MAAMO,a,GAjBQQ,IAAMC,WCmDlBC,G,kBA7Cd,aAAc,IAAD,8BACZ,+CAeEC,eAAe,SAACC,GACf,EAAKL,SAAS,CAACpB,YAAYyB,EAAMC,OAAOC,SAf3C,EAAKZ,MAAM,CACHrB,OAAO,GACPM,YAAY,IAJR,E,iFASU,IAAD,OAClB4B,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAQ,EAAKZ,SAAS,CAAC1B,OAAOsC,S,+BAS/B,IAAD,EACoBb,KAAKJ,MAAzBrB,EADA,EACAA,OAAOM,EADP,EACOA,YACRiC,EAAevC,EAAOwC,QAAO,SAAAC,GAC/B,OAAOA,EAAMhD,KAAKiD,cAAcC,SAASrC,EAAYoC,kBAGtD,OAAI1C,EAAO4C,OAIX,yBAAKhD,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAckB,KAAKK,iBAC3B,kBAAC,EAAD,KACC,kBAACe,EAAD,KACF,kBAAC,EAAD,CAAU7C,OAAQuC,OARd,+C,GA7BMZ,IAAMC,YCKJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.ff2a5b3c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nconst Card=({name,email,id})=>{\r\n\t\r\n\t return(\r\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow'>\r\n        <img src={`https://robohash.org/${id}?w=100&h=100`} alt=\"robot\"/>\r\n       \r\n        <div>\r\n         <h2> {name} </h2>\r\n         <p> {email} </p>\r\n        </div>\r\n      </div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList=({robots})=>{\r\n  \r\n  return(\r\n         <div>\r\n         {\r\n\t          robots.map((user,i)=>{\r\n         return(\r\n  \t    <Card \r\n  \t          key={i} \r\n  \t          id={robots[i].id} \r\n  \t          name={robots[i].name} \r\n  \t          email={robots[i].email}\r\n  \t          />\r\n  \t          );\r\n            })\r\n            }\r\n\t       </div>\r\n  \t);\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchfield,searchChange})=>{\r\n\treturn(\r\n      <div className='pa2'>\r\n\t\t<input\r\n\t\t className='pa2 ba b--green bg-lightest-blue'\r\n\t\t type='search' \r\n\t\t placeholder='search robots'\r\n\t\t onChange={searchChange}\r\n\t    />\r\n\t  </div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\n\r\nconst Scroll=(props)=>{\r\n\tconsole.log(props);\r\n\treturn (\r\n      <div style={{overflow:'scroll',border:'5px solid black',height:'500px'}}>\r\n        {props.children}\r\n      </div>\r\n\r\n\t\t)\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n          hasError:false\r\n\t\t}\r\n\t}\r\n\r\ncomponentDidCatch(eroor,info){\r\n   this.setState({hasError:true})\r\n}\r\n\r\nrender(){\r\n\tif(this.state.hasError){\r\n\t\treturn<h1>Ooops.That is not good </h1>\r\n\t}\r\n\r\n\treturn this.props.children\r\n}\r\n\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from'../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nclass App extends React.Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t         robots:[],\r\n\t         searchfield:''\r\n         }\r\n\t}\r\n\r\n\r\n    componentDidMount(){\r\n    \tfetch('https://jsonplaceholder.typicode.com/users')\r\n    \t.then(response=>response.json())\r\n    \t.then(users=>{this.setState({robots:users})});\r\n      }\r\n \r\n\r\n    onSearchChange=(event)=>{\r\n    \tthis.setState({searchfield:event.target.value})\r\n    \t}\r\n\r\n    \t\r\n\trender(){\r\n\t\tconst {robots,searchfield}=this.state;\r\n\t\tconst filteredRobots=robots.filter(robot=>{\r\n    \t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    \t})\r\n\r\n    \tif(!robots.length){\r\n    \treturn <h1> Loading...</h1>\r\n    \t}else{\r\n\t      return(\r\n\t\t   <div className='tc'>\r\n\t\t    <h1 className='f1'>Robofriends</h1>\r\n\t\t    <SearchBox searchChange={this.onSearchChange} />\r\n\t\t       <Scroll>\r\n\t\t        <ErrorBoundary>\r\n\t\t      <CardList robots={filteredRobots} />\r\n\t\t        </ErrorBoundary>\r\n\t\t       </Scroll>\r\n\t\t   </div>\r\n\t\t);\r\n\t}\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}